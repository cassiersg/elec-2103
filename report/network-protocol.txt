------------
REQUIREMENTS
------------

The key words "MAY", "MUST", "MUST NOT", "OPTIONAL", "RECOMMENDED",
"REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT" in this
document are to be interpreted as described in RFC 2119.

-------------
PACKET FORMAT
-------------

    block_type[1 byte] length[2 bytes] payload[length bytes]
    <------------ header ------------>

---------------------------
PAYLOAD FOR EACH BLOCK TYPE
---------------------------

Everything MUST be in network-byte order (big-endian, MSB first).

    0: CLIENT CONNECT 
        - client role (player: 0, spectator: 1)     [1 byte] 
	
    1: SERVER CONNECT 
        - accept status (accepted: 0, denied: 1)    [1 byte] 
	
    2: CLIENT READY
        no payload

    3: SERVER START GAME
        - player_id (can be 1 or 2)                 [1 byte]
        - grid_size_x (currently hardcoded to 15)   [1 byte]
        - grid_size_y (currently hardcoded to 6)    [1 byte]
	    NOTE: SHOULD be send only when two players
        are ready.

    4: CLIENT ACTION
        - player_id (can be 1 or 2)                 [1 byte]
        - action_id                                 [4 bytes]
        - positions_id                              [4 bytes]
        - move_type (left: 0, right: 1, pause: 2,
        resume: 3)                                  [1 byte]
	
    5: CLIENT ANGLE:
        - player_id (can be 1 or 2)                 [1 byte]
        - angle                                     [2 bytes]
        NOTE: angle is as read from the accelerometer
        (i.e. unsigned int on 16 bits).
        SHOULD be send at a reasonable pace,
        5-10Hz for example. 

    6: SERVER GAME FINISHED
        no payload
	
    7: SERVER ACTION RESPONSE:
        - action_id                                 [4 bytes]
        - action_answer_status (accepted: 0,
                                refused: 1)         [1 byte]
        NOTE: currently not used.
	
    8: SERVER GRID STATE
        - grid: 1 byte per case, row by row,        [X*Y bytes]
        starting from (x,y) = (0,0) which is
        bottom left (hole: 4, wall: 3, struct:0)
        NOTE: MUST only sent when a new round begins

    9: SERVER PLAYER POSITIONS
        - positions_id                              [4 bytes]
        - player 1 position x                       [1 byte]
        - player 1 position y                       [1 byte]
        - player 2 position x                       [1 byte]
        - player 2 position y                       [1 byte]

    10: SERVER ROUND GAUGE STATE
        - gauge units                               [2 bytes]
        NOTE: to be more precise, the gauge state
        is initially at 2^16-1 and decrease at a
        rate given by the current speed (in gauge
        units/ms).
        - speed in gauge units per milliseconds     [2 bytes]	
        NOTE: SHOULD be sent at a fixed frequency
        (example: 5 Hz).

    11: SERVER SCORE:
        - score                                     [4 bytes]
        NOTE: again, MUST only be transmitted if
        a change in the score occured.
	
    12: SERVER GLOBAL GAUGE STATE
        - gauge units                               [2 bytes]
        NOTE: decrease at a constant speed (not like
        the round gauge state)
        NOTE: SHOULD be sent at a fixed frequency
        (example: 5 Hz).

    13: SERVER END ROUND
        - won (1) or lost (0)                       [1 byte]

    14: CLIENT GAME PAUSE
        no payload

    15: CLIENT GAME RESUME
        no payload

    16: SERVER GAME PAUSE
        no payload

    17: SERVER GAME RESUME
        no payload

    18: SERVER_PLAYERS_PICTURES
        - player1_picture                           [4096 bytes]
        - player2_picture                           [4096 bytes]
        NOTE: pictures MUST be 32x32, encoded RGBA
        LSB (4 bytes per pixel)
    
-----------------
TYPICAL EXCHANGES
-----------------
WARNING: some parts are deprecated, SHOULD be updated.

C -> S: client connect
S -> C: server connect
C -> S: client ready
S -> C: server start game
(
	[
	S -> C: server grid state | server score | server gauge state | server speed
	or
	C -> S: client action
	S -> C: server action response
	or
	C -> S: client angle
	]+
	S -> C: server round gauge state
    S -> C: server global gauge state
)+
S -> C: server game finished

Disconnect via timeout (server disconnects clients after 1sec timeout)

--------
TCP PORT
--------
The TCP port 10000 must be used.

--------
APPENDIX
--------

In case you use Python pack/unpack from the Struct module, the following
format string should be correct

HEADER_FMT:                 '!BH'

CLIENT_CONNECT:             '!B'
SERVER_CONNECT:             '!B'
CLIENT_READY:               '!'
SERVER_START_GAME:          '!BBB'
CLIENT_ACTION:              '!BIIB'
CLIENT_ANGLE:               '!BB'
SERVER_GAME_FINISHED:       '!'
SERVER_ACTION_RESPONSE:     '!IB'
SERVER_GRID_STATE:          '!' + str(X*Y) + 'B'
SERVER_PLAYER_POSITION:     '!IBBBB'
SERVER_ROUND_GAUGE_STATE:   '!HH'
SERVER_SCORE:               '!I'
SERVER_GLOBAL_GAUGE_STATE:  '!H'
SERVER_END_ROUND            '!B'
CLIENT_GAME_PAUSE           '!'
CLIENT_GAME_RESUME          '!'
SERVER_GAME_PAUSE           '!'
SERVER_GAME_RESUME          '!'

- ! means network-byte order (and '!' is associated to a packet witouth any
  payload)
- B means unsigned integer on 1 byte
- H means unsigned integer on 2 bytes
- I means unsigned integer on 4 bytes
- Let x be a positive integer, 'xB' means x consecutive unsigned integers on 1 byte
Example: 4B is equivalent to BBBB.
